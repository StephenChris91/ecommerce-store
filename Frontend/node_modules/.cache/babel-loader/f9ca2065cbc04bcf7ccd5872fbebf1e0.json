{"ast":null,"code":"var _jsxFileName = \"D:\\\\React-Testing\\\\ecommerce\\\\frontend\\\\src\\\\Screens\\\\ProfileScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Message } from '../Components/Message';\nimport { Loader } from '../Components/Loader';\nimport { getUserDetails, updateUserProfile } from '../actions/userActions';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProfileScreen() {\n  _s();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState(null);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const updated = () => toast(\"Profile Updated Successfully\", {\n    position: toast.POSITION.TOP_RIGHT,\n    autoClose: 2000,\n    type: toast.TYPE.SUCCESS\n  });\n\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  const updateProfile = useSelector(state => state.updateProfile);\n  const {\n    success\n  } = updateProfile; // const { search } = useLocation();\n  // const redirectUrl = new URLSearchParams(search).get('redirectUrl')\n  // const redirect = redirectUrl ? redirectUrl : '/'\n\n  useEffect(() => {\n    if (!userInfo) {\n      navigate('/login');\n    } else {\n      if (!user || !user.name) {\n        dispatch(getUserDetails(\"profile\"));\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n      }\n    }\n  }, [dispatch, userInfo, navigate, user]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (password === confirmPassword) {\n      dispatch(updateUserProfile({\n        id: user._id,\n        name,\n        email,\n        password\n      }));\n      notify();\n    } else {\n      setMessage('Passwords do not match');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      md: 5,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), success && /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 19\n      }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeholder: \"Enter your name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter your email address\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"password\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"Enter your password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"confirmPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"Confirm your password\",\n            value: confirmPassword,\n            onChange: e => setConfirmPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          className: \"my-4\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      md: 7,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"My Orders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 12\n  }, this);\n}\n\n_s(ProfileScreen, \"wKQKj5PqYaS/munXC6xiuvRsM7E=\", false, function () {\n  return [useDispatch, useNavigate, useSelector, useSelector, useSelector];\n});\n\n_c = ProfileScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileScreen\");","map":{"version":3,"sources":["D:/React-Testing/ecommerce/frontend/src/Screens/ProfileScreen.js"],"names":["React","useState","useEffect","Link","useLocation","useNavigate","Form","Button","Row","Col","useDispatch","useSelector","Message","Loader","getUserDetails","updateUserProfile","ToastContainer","toast","ProfileScreen","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","dispatch","navigate","updated","position","POSITION","TOP_RIGHT","autoClose","type","TYPE","SUCCESS","userDetails","state","loading","error","user","userLogin","userInfo","updateProfile","success","submitHandler","e","preventDefault","id","_id","notify","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,WAA5B,QAA+C,kBAA/C;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,GAA5B,QAAuC,iBAAvC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,wBAAlD;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;;AAGA,eAAe,SAASC,aAAT,GAA0B;AAAA;;AACrC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAEoB,KAAF,EAASC,QAAT,IAAsBrB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAEsB,QAAF,EAAYC,WAAZ,IAA4BvB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACwB,eAAD,EAAkBC,kBAAlB,IAAwCzB,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAAC0B,OAAD,EAAUC,UAAV,IAAwB3B,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAM4B,QAAQ,GAAGnB,WAAW,EAA5B;AACA,QAAMoB,QAAQ,GAAGzB,WAAW,EAA5B;;AACA,QAAM0B,OAAO,GAAG,MAAMd,KAAK,CAAC,8BAAD,EAAiC;AACxDe,IAAAA,QAAQ,EAAEf,KAAK,CAACgB,QAAN,CAAeC,SAD+B;AAExDC,IAAAA,SAAS,EAAE,IAF6C;AAGxDC,IAAAA,IAAI,EAAEnB,KAAK,CAACoB,IAAN,CAAWC;AAHuC,GAAjC,CAA3B;;AAQA,QAAMC,WAAW,GAAG5B,WAAW,CAAC6B,KAAK,IAAIA,KAAK,CAACD,WAAhB,CAA/B;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BJ,WAAjC;AAEA,QAAMK,SAAS,GAAGjC,WAAW,CAAC6B,KAAK,IAAIA,KAAK,CAACI,SAAhB,CAA7B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeD,SAArB;AAGA,QAAME,aAAa,GAAGnC,WAAW,CAAC6B,KAAK,IAAIA,KAAK,CAACM,aAAhB,CAAjC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcD,aAApB,CAzBqC,CA2BrC;AACA;AACA;;AAEA5C,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAAC2C,QAAL,EAAe;AACXf,MAAAA,QAAQ,CAAC,QAAD,CAAR;AACH,KAFD,MAEK;AACD,UAAG,CAACa,IAAD,IAAS,CAACA,IAAI,CAACxB,IAAlB,EAAuB;AACnBU,QAAAA,QAAQ,CAACf,cAAc,CAAC,SAAD,CAAf,CAAR;AACH,OAFD,MAEK;AACDM,QAAAA,OAAO,CAACuB,IAAI,CAACxB,IAAN,CAAP;AACAG,QAAAA,QAAQ,CAACqB,IAAI,CAACtB,KAAN,CAAR;AACH;AACJ;AACJ,GAXQ,EAWN,CAACQ,QAAD,EAAWgB,QAAX,EAAqBf,QAArB,EAA+Ba,IAA/B,CAXM,CAAT;;AAaA,QAAMK,aAAa,GAAIC,CAAD,IAAO;AACzBA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAG3B,QAAQ,KAAKE,eAAhB,EAAgC;AAC5BI,MAAAA,QAAQ,CAACd,iBAAiB,CAAC;AACvBoC,QAAAA,EAAE,EAAER,IAAI,CAACS,GADc;AAEvBjC,QAAAA,IAFuB;AAGvBE,QAAAA,KAHuB;AAIvBE,QAAAA;AAJuB,OAAD,CAAlB,CAAR;AAQA8B,MAAAA,MAAM;AACT,KAVD,MAUK;AAEDzB,MAAAA,UAAU,CAAC,wBAAD,CAAV;AACH;AAIJ,GApBD;;AAsBA,sBAAO,QAAC,GAAD;AAAA,4BACH,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA,8BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EAECD,OAAO,iBAAI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAC,QAAjB;AAAA,kBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,cAFZ,EAGCoB,OAAO,iBAAI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cAHZ,EAICL,KAAK,iBAAI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAC,QAAjB;AAAA,kBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,cAJV,EAKCD,OAAO,iBAAI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cALZ,eAMA,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEO,aAAhB;AAAA,gCACI,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,MAAtB;AAAA,kCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,YAAA,IAAI,EAAC,MAAnB;AACA,YAAA,WAAW,EAAC,iBADZ;AAEA,YAAA,KAAK,EAAE7B,IAFP;AAGA,YAAA,QAAQ,EAAG8B,CAAD,IAAO7B,OAAO,CAAC6B,CAAC,CAACK,MAAF,CAASC,KAAV;AAHxB;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAUI,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,OAAtB;AAAA,kCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,YAAA,IAAI,EAAC,OAAnB;AACA,YAAA,WAAW,EAAC,0BADZ;AAEA,YAAA,KAAK,EAAElC,KAFP;AAGA,YAAA,QAAQ,EAAG4B,CAAD,IAAO3B,QAAQ,CAAC2B,CAAC,CAACK,MAAF,CAASC,KAAV;AAHzB;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAmBI,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,UAAtB;AAAA,kCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,YAAA,IAAI,EAAC,UAAnB;AACA,YAAA,WAAW,EAAC,qBADZ;AAEA,YAAA,KAAK,EAAEhC,QAFP;AAGA,YAAA,QAAQ,EAAG0B,CAAD,IAAOzB,WAAW,CAACyB,CAAC,CAACK,MAAF,CAASC,KAAV;AAH5B;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBJ,eA4BI,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,iBAAtB;AAAA,kCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,YAAA,IAAI,EAAC,UAAnB;AACA,YAAA,WAAW,EAAC,uBADZ;AAEA,YAAA,KAAK,EAAE9B,eAFP;AAGA,YAAA,QAAQ,EAAGwB,CAAD,IAAOvB,kBAAkB,CAACuB,CAAC,CAACK,MAAF,CAASC,KAAV;AAHnC;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBA5BJ,eAqCI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,IAAI,EAAC,QAA/B;AAAwC,UAAA,SAAS,EAAC,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBArCJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,eAgDH,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAhDG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAoDH;;GAtHuBrC,a;UAOHR,W,EACAL,W,EASGM,W,EAGFA,W,EAIIA,W;;;KAxBFO,a","sourcesContent":["import React, {useState, useEffect } from 'react'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {Message} from '../Components/Message'\r\nimport {Loader} from '../Components/Loader'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\n\r\nexport default function ProfileScreen( ) {\r\n    const [name, setName] = useState('')\r\n    const [ email, setEmail ] = useState('')\r\n    const [ password, setPassword ] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const updated = () => toast(\"Profile Updated Successfully\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        autoClose: 2000,\r\n        type: toast.TYPE.SUCCESS\r\n    });\r\n\r\n    \r\n\r\n    const userDetails = useSelector(state => state.userDetails);\r\n    const { loading, error, user } = userDetails;\r\n\r\n    const userLogin = useSelector(state => state.userLogin);\r\n    const { userInfo } = userLogin;\r\n\r\n\r\n    const updateProfile = useSelector(state => state.updateProfile);\r\n    const { success } = updateProfile;\r\n\r\n    // const { search } = useLocation();\r\n    // const redirectUrl = new URLSearchParams(search).get('redirectUrl')\r\n    // const redirect = redirectUrl ? redirectUrl : '/'\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            navigate('/login')\t\r\n        }else{\r\n            if(!user || !user.name){\r\n                dispatch(getUserDetails(\"profile\"))\r\n            }else{\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [dispatch, userInfo, navigate, user])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(password === confirmPassword){\r\n            dispatch(updateUserProfile({\r\n                id: user._id,\r\n                name,\r\n                email,\r\n                password\r\n            }\r\n            ))\r\n\r\n            notify()\r\n        }else{\r\n            \r\n            setMessage('Passwords do not match')\r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n    return <Row>\r\n        <Col md={5}>\r\n        <h2>Profile</h2>\r\n        {message && <Message variant=\"danger\">{message}</Message>}\r\n        {success && <ToastContainer />}\r\n        {error && <Message variant=\"danger\">{error}</Message>}\r\n        {loading && <Loader />}\r\n        <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId=\"name\">\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control type=\"name\" \r\n                placeholder=\"Enter your name\"\r\n                value={name} \r\n                onChange={(e) => setName(e.target.value)}>\r\n                </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"email\">\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control type=\"email\" \r\n                placeholder=\"Enter your email address\"\r\n                value={email} \r\n                onChange={(e) => setEmail(e.target.value)}>\r\n                </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"password\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" \r\n                placeholder=\"Enter your password\"\r\n                value={password} \r\n                onChange={(e) => setPassword(e.target.value)}>\r\n                </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"confirmPassword\">\r\n                <Form.Label>Confirm Password</Form.Label>\r\n                <Form.Control type=\"password\" \r\n                placeholder=\"Confirm your password\"\r\n                value={confirmPassword} \r\n                onChange={(e) => setConfirmPassword(e.target.value)}>\r\n                </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\" className=\"my-4\" >Update</Button>\r\n        </Form>\r\n\r\n        </Col>\r\n        <Col md={7}>\r\n            <h1>My Orders</h1>\r\n        </Col>\r\n    </Row>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}